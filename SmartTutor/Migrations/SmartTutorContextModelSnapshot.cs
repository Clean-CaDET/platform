// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartTutor.Database;

namespace SmartTutor.Migrations
{
    [DbContext(typeof(SmartTutorContext))]
    partial class SmartTutorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IssueAdviceLearningObjectSummary", b =>
                {
                    b.Property<int>("AdviceId")
                        .HasColumnType("integer");

                    b.Property<int>("SummariesId")
                        .HasColumnType("integer");

                    b.HasKey("AdviceId", "SummariesId");

                    b.HasIndex("SummariesId");

                    b.ToTable("IssueAdviceLearningObjectSummary");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArrangeTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArrangeTaskId");

                    b.ToTable("ArrangeTaskContainers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArrangeTaskContainerId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArrangeTaskContainerId");

                    b.ToTable("ArrangeTaskElements");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.ChallengeHint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("LearningObjectSummaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChallengeHints");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ChallengeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeFulfillmentStrategies");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.MetricRangeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClassMetricCheckerForeignKey")
                        .HasColumnType("integer");

                    b.Property<double>("FromValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("HintId")
                        .HasColumnType("integer");

                    b.Property<int?>("MethodMetricCheckerForeignKey")
                        .HasColumnType("integer");

                    b.Property<string>("MetricName")
                        .HasColumnType("text");

                    b.Property<double>("ToValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClassMetricCheckerForeignKey");

                    b.HasIndex("HintId");

                    b.HasIndex("MethodMetricCheckerForeignKey");

                    b.ToTable("MetricRangeRules");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.LearningObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LearningObjectSummaryId")
                        .HasColumnType("integer");

                    b.Property<int?>("NodeProgressId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NodeProgressId");

                    b.ToTable("LearningObjects");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Questions.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.KnowledgeNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LearningObjective")
                        .HasColumnType("text");

                    b.Property<int>("LectureId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("KnowledgeNodes");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.LearningObjectSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("KnowledgeNodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeNodeId");

                    b.ToTable("LearningObjectSummaries");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.IndividualPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("NumberOfCourses")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfLectures")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("IndividualPlans");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.IndividualPlanUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IndividualPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfCoursesUsed")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfLecturesUsed")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfUsersUsed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("IndividualPlanUsages");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IndividualPlanUsageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SmartTutor.LearnerModel.Learners.Learner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuralScore")
                        .HasColumnType("integer");

                    b.Property<int>("KinaestheticScore")
                        .HasColumnType("integer");

                    b.Property<int>("ReadWriteScore")
                        .HasColumnType("integer");

                    b.Property<string>("StudentIndex")
                        .HasColumnType("text");

                    b.Property<int>("VisualScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Learners");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Feedback.LearningObjectFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LearnerId")
                        .HasColumnType("integer");

                    b.Property<int>("LearningObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("LearningObjectFeedback");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Progress.CourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseEnrollment");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Progress.NodeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LearnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("NodeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeProgresses");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.ArrangeTaskContainerSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ArrangeTaskSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("ElementIds")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("ArrangeTaskSubmissionId");

                    b.ToTable("ArrangeTaskContainerSubmissions");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.ArrangeTaskSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArrangeTaskId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("LearnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ArrangeTaskSubmissions");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.ChallengeSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("LearnerId")
                        .HasColumnType("integer");

                    b.Property<string[]>("SourceCode")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ChallengeSubmissions");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.QuestionSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("LearnerId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("SubmittedAnswerIds")
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("QuestionSubmissions");
                });

            modelBuilder.Entity("SmartTutor.QualityAnalysis.IssueAdvice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IssueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Advice");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy");

                    b.ToTable("BasicMetricCheckers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.NameChecker.BasicNameChecker", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy");

                    b.Property<List<string>>("BannedWords")
                        .HasColumnType("text[]");

                    b.Property<int?>("HintId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("RequiredWords")
                        .HasColumnType("text[]");

                    b.HasIndex("HintId");

                    b.ToTable("BasicNameCheckers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTask", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.ToTable("ArrangeTasks");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.Challenge", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("SolutionIdForeignKey")
                        .HasColumnType("integer");

                    b.Property<string>("TestSuiteLocation")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasIndex("SolutionIdForeignKey");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Image", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Questions.Question", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Text", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Video", b =>
                {
                    b.HasBaseType("SmartTutor.ContentModel.LearningObjects.LearningObject");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("IssueAdviceLearningObjectSummary", b =>
                {
                    b.HasOne("SmartTutor.QualityAnalysis.IssueAdvice", null)
                        .WithMany()
                        .HasForeignKey("AdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTutor.ContentModel.Lectures.LearningObjectSummary", null)
                        .WithMany()
                        .HasForeignKey("SummariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskContainer", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTask", null)
                        .WithMany("Containers")
                        .HasForeignKey("ArrangeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskElement", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskContainer", null)
                        .WithMany("Elements")
                        .HasForeignKey("ArrangeTaskContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.Challenge", null)
                        .WithMany("FulfillmentStrategies")
                        .HasForeignKey("ChallengeId");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.MetricRangeRule", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", null)
                        .WithMany("ClassMetricRules")
                        .HasForeignKey("ClassMetricCheckerForeignKey");

                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.ChallengeHint", "Hint")
                        .WithMany()
                        .HasForeignKey("HintId");

                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", null)
                        .WithMany("MethodMetricRules")
                        .HasForeignKey("MethodMetricCheckerForeignKey");

                    b.Navigation("Hint");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.LearningObject", b =>
                {
                    b.HasOne("SmartTutor.ProgressModel.Progress.NodeProgress", null)
                        .WithMany("LearningObjects")
                        .HasForeignKey("NodeProgressId");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Questions.QuestionAnswer", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Questions.Question", null)
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Course", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Subscriptions.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.KnowledgeNode", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Lectures.Lecture", null)
                        .WithMany("KnowledgeNodes")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.LearningObjectSummary", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Lectures.KnowledgeNode", "KnowledgeNode")
                        .WithMany("LearningObjectSummaries")
                        .HasForeignKey("KnowledgeNodeId");

                    b.Navigation("KnowledgeNode");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Lecture", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Lectures.Course", null)
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.Subscription", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Subscriptions.Teacher", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.LearnerModel.Learners.Learner", b =>
                {
                    b.OwnsOne("SmartTutor.LearnerModel.Workspaces.Workspace", "Workspace", b1 =>
                        {
                            b1.Property<int>("LearnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Path")
                                .HasColumnType("text")
                                .HasColumnName("WorkspacePath");

                            b1.HasKey("LearnerId");

                            b1.ToTable("Learners");

                            b1.WithOwner()
                                .HasForeignKey("LearnerId");
                        });

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Progress.CourseEnrollment", b =>
                {
                    b.HasOne("SmartTutor.LearnerModel.Learners.Learner", null)
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("LearnerId");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Progress.NodeProgress", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.Lectures.KnowledgeNode", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.ArrangeTaskContainerSubmission", b =>
                {
                    b.HasOne("SmartTutor.ProgressModel.Submissions.ArrangeTaskSubmission", null)
                        .WithMany("Containers")
                        .HasForeignKey("ArrangeTaskSubmissionId");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.NameChecker.BasicNameChecker", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.ChallengeHint", "Hint")
                        .WithMany()
                        .HasForeignKey("HintId");

                    b.HasOne("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.ChallengeFulfillmentStrategy", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.NameChecker.BasicNameChecker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hint");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTask", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.Challenge", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Challenges.Challenge", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTutor.ContentModel.Lectures.LearningObjectSummary", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionIdForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Image", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Questions.Question", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Questions.Question", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Text", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Text", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Video", b =>
                {
                    b.HasOne("SmartTutor.ContentModel.LearningObjects.LearningObject", null)
                        .WithOne()
                        .HasForeignKey("SmartTutor.ContentModel.LearningObjects.Video", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTaskContainer", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Course", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.KnowledgeNode", b =>
                {
                    b.Navigation("LearningObjectSummaries");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Lectures.Lecture", b =>
                {
                    b.Navigation("KnowledgeNodes");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.Subscriptions.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SmartTutor.LearnerModel.Learners.Learner", b =>
                {
                    b.Navigation("CourseEnrollments");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Progress.NodeProgress", b =>
                {
                    b.Navigation("LearningObjects");
                });

            modelBuilder.Entity("SmartTutor.ProgressModel.Submissions.ArrangeTaskSubmission", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.FulfillmentStrategy.MetricChecker.BasicMetricChecker", b =>
                {
                    b.Navigation("ClassMetricRules");

                    b.Navigation("MethodMetricRules");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.ArrangeTasks.ArrangeTask", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Challenges.Challenge", b =>
                {
                    b.Navigation("FulfillmentStrategies");
                });

            modelBuilder.Entity("SmartTutor.ContentModel.LearningObjects.Questions.Question", b =>
                {
                    b.Navigation("PossibleAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
